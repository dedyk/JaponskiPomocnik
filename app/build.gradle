import com.android.builder.core.DefaultManifestParser
import groovy.swing.SwingBuilder

apply plugin: 'com.android.application'

def keystorePropertiesFile = rootProject.file("app/signing.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    dataBinding.enabled = true

    compileSdkVersion 26
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId "pl.idedyk.android.japaneselearnhelper"
        minSdkVersion 14
        targetSdkVersion 26
        multiDexEnabled true

        versionCode 639
        versionName "20190224"
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            minifyEnabled false
            shrinkResources false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    useLibrary 'org.apache.http.legacy'

    lintOptions {
	abortOnError false
    }

    gradle.taskGraph.afterTask { Task task, TaskState state ->
	if (state.failure) {
    	    // noop

	} else {

	    if (task.name == 'assembleRelease') {
		def versionName = defaultConfig.versionName
		def versionCode = defaultConfig.versionCode

		def outputRelease = "release/release_" + versionCode + "_" + versionName
		def outputName = "JapaneseAndroidLearnHelper_release_" + versionCode + "_" + versionName

		mkdir("../" + outputRelease)

		copy {
		    from('build/outputs/apk/release') {
			include 'app-release.apk'
		    }
		    into '../' + outputRelease
		    rename ("app-release.apk", outputName + ".apk")
		}
	    }
	}
    }
}

dependencies {
    implementation 'com.google.android.gms:play-services:+'
    implementation 'com.android.support:multidex:1.0.1'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation files('libs/JapaneseDictionaryAPI-1.0-SNAPSHOT.jar')
    implementation files('libs/JapaneseDictionaryLuceneCommon-1.0-SNAPSHOT.jar')
    implementation files('libs/javacsv-2.1.jar')
    implementation files('libs/lucene-analyzers-common-4.7.2.jar')
    implementation files('libs/lucene-core-4.7.2-without-SPIClassIterator-and-RamUsageEstimator.jar')
    implementation files('libs/lucene-suggest-4.7.2.jar')
}
